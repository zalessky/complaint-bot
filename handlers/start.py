from aiogram import Router
from aiogram.filters import CommandStart, Command
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from keyboards.reply import main_menu_keyboard
from utils.db import get_admin_details

router = Router()

@router.message(CommandStart())
async def command_start(message: Message, state: FSMContext):
    await state.clear()
    admin_info = await get_admin_details(message.from_user.id)
    is_admin = admin_info and admin_info.get('role','') in ('admin','superadmin')
    await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=main_menu_keyboard(is_admin))

@router.message(Command("menu"))
async def command_menu(message: Message, state: FSMContext):
    await state.clear()
    admin_info = await get_admin_details(message.from_user.id)
    is_admin = admin_info and admin_info.get('role','') in ('admin','superadmin')
    await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=main_menu_keyboard(is_admin))

@router.message(Command("panel"))
async def command_panel(message: Message, state: FSMContext):
    from keyboards.inline import get_admin_panel_keyboard
    from utils.db import get_admin_stats
    admin_info = await get_admin_details(message.from_user.id)
    await message.answer(f"DEBUG: user_id={message.from_user.id}, admin_info={admin_info}")
    if not admin_info or admin_info.get('role','') not in ('admin','superadmin'):
        await message.answer("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.", reply_markup=main_menu_keyboard())
        return
    stats = await get_admin_stats(admin_info.get('permissions',[]))
    await message.answer(f"–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (role={admin_info.get('role')}, perms={admin_info.get('permissions')})", reply_markup=get_admin_panel_keyboard(stats))

@router.message(lambda m: m.text and m.text.lower() == "–ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
async def handle_panel_admin(message: Message, state: FSMContext):
    from keyboards.inline import get_admin_panel_keyboard
    from utils.db import get_admin_stats
    admin_info = await get_admin_details(message.from_user.id)
    await message.answer(f"DEBUG: user_id={message.from_user.id}, admin_info={admin_info}")
    if not admin_info or admin_info.get('role','') not in ('admin','superadmin'):
        await message.answer("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.", reply_markup=main_menu_keyboard())
        return
    stats = await get_admin_stats(admin_info.get('permissions',[]))
    await message.answer(f"–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (role={admin_info.get('role')}, perms={admin_info.get('permissions')})", reply_markup=get_admin_panel_keyboard(stats))

@router.message(lambda m: m.text and m.text.lower() == "–Ω–∞–ø—Ä–∞–≤–∏—Ç—å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å")
async def handle_gratitude(message: Message, state: FSMContext):
    admin_info = await get_admin_details(message.from_user.id)
    is_admin = admin_info and admin_info.get('role','') in ('admin','superadmin')
    await message.answer("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª '–±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏' –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–∑–∂–µ!", reply_markup=main_menu_keyboard(is_admin))

@router.message(lambda m: m.text and m.text.lower() == "—Å–ø—Ä–∞–≤–∫–∞/–æ —Å–µ—Ä–≤–∏—Å–µ")
async def handle_help(message: Message, state: FSMContext):
    admin_info = await get_admin_details(message.from_user.id)
    is_admin = admin_info and admin_info.get('role','') in ('admin','superadmin')
    text = (
        "ü§ñ <b>–ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç</b>:\n\n"
        "‚Ä¢ –ü–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É ‚Äî —Ñ–æ—Ç–æ, –∞–¥—Ä–µ—Å, –§–ò–û, —Ç–µ–ª–µ—Ñ–æ–Ω (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã).\n"
        "‚Ä¢ –ù–∞–ø—Ä–∞–≤–∏—Ç—å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–ª–∏ —Å–µ—Ä–≤–∏—Å.\n"
        "‚Ä¢ –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ –æ —Ä–∞–±–æ—Ç–µ –∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö —Å–µ—Ä–≤–∏—Å–∞.\n"
    )
    if is_admin:
        text += "‚Ä¢ –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∞–ª–æ–±–∞–º–∏ –∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤).\n"
    await message.answer(text, parse_mode='HTML', reply_markup=main_menu_keyboard(is_admin))

@router.message(Command('id'))
async def cmd_id(message: Message, state: FSMContext):
    await message.answer(f'–í–∞—à user_id: {message.from_user.id}')
