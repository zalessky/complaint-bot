#!/usr/bin/env python3
"""
–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ 4: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Mini App
"""
print("üì¶ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ 4: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Mini App")
print("="*60)

# –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è security –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Mini Apps
security_py = '''import hmac
import hashlib
import json
from urllib.parse import parse_qs, unquote
from fastapi import HTTPException, Header
from typing import Optional

def validate_telegram_init_data(init_data: str, bot_token: str) -> dict:
    """
    –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç initData –æ—Ç Telegram Mini App
    """
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
        parsed = parse_qs(init_data)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º hash
        received_hash = parsed.get('hash', [None])[0]
        if not received_hash:
            raise ValueError("Missing hash")
        
        # –£–¥–∞–ª—è–µ–º hash –∏–∑ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        data_check_arr = []
        for key in sorted(parsed.keys()):
            if key != 'hash':
                values = parsed[key]
                for value in values:
                    data_check_arr.append(f"{key}={value}")
        
        data_check_string = "\\n".join(data_check_arr)
        
        # –°–æ–∑–¥–∞–µ–º secret key
        secret_key = hmac.new(
            "WebAppData".encode(),
            bot_token.encode(),
            hashlib.sha256
        ).digest()
        
        # –í—ã—á–∏—Å–ª—è–µ–º hash
        calculated_hash = hmac.new(
            secret_key,
            data_check_string.encode(),
            hashlib.sha256
        ).hexdigest()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º hash
        if calculated_hash != received_hash:
            raise ValueError("Invalid hash")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_json = parsed.get('user', [None])[0]
        if user_json:
            user = json.loads(unquote(user_json))
            return user
        
        raise ValueError("No user data")
        
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Telegram data: {e}")
        raise HTTPException(status_code=401, detail="Auth failed")

def get_current_user_id(init_data: Optional[str] = Header(None, alias="X-Telegram-Init-Data"), bot_token: str = None) -> int:
    """
    –ü–æ–ª—É—á–∞–µ—Ç ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram initData
    """
    if not init_data:
        raise HTTPException(status_code=401, detail="Missing auth data")
    
    if not bot_token:
        from backend.core.config import settings
        bot_token = settings.BOT_TOKEN
    
    user = validate_telegram_init_data(init_data, bot_token)
    return user.get('id')
'''

with open("backend/core/security.py", "w", encoding="utf-8") as f:
    f.write(security_py)

print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω backend/core/security.py")
print("  ‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è Telegram initData")
print("  ‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ hash verification")

# –û–±–Ω–æ–≤–ª—è–µ–º dependencies –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π security
dependencies_py = '''from fastapi import Depends, Header, HTTPException
from typing import Optional
from backend.core.config import settings
from backend.core.security import get_current_user_id

async def get_current_user(
    init_data: Optional[str] = Header(None, alias="X-Telegram-Init-Data")
) -> int:
    """
    Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    return get_current_user_id(init_data, settings.BOT_TOKEN)

async def get_current_admin(
    user_id: int = Depends(get_current_user)
) -> int:
    """
    Dependency –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    """
    if user_id not in settings.admin_ids_list and user_id != settings.SUPER_ADMIN_ID:
        raise HTTPException(status_code=403, detail="Access denied")
    return user_id
'''

with open("backend/core/dependencies.py", "w", encoding="utf-8") as f:
    f.write(dependencies_py)

print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω backend/core/dependencies.py")

print("\n" + "="*60)
print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ 4 –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
print("\nüìù –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ backend:")
print("  bash stop_app.sh")
print("  bash start_app.sh")
print("\n–ò–ª–∏ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏:")
print("  PYTHONPATH=. poetry run python backend/main.py")
