#!/bin/bash
echo "üì¶ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è v0.8.0"
echo "================================"
echo ""
echo "–ò–∑–º–µ–Ω–µ–Ω–∏—è:"
echo "  0. –ö–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' –≤–æ –≤—Å–µ—Ö –º–µ–Ω—é"
echo "  1. –£–ª—É—á—à–µ–Ω–Ω—ã–π UI (–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ 2 –≤ —Ä—è–¥)"
echo "  2. –ü—Ä–µ–≤—å—é –∂–∞–ª–æ–±—ã –Ω–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ"
echo "  3. –§–∏–Ω–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ '–í—Å—ë –≤–µ—Ä–Ω–æ, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å'"
echo "  4. Endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ"
echo "  5. –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–æ—Ç–æ –≤ —Ç–∏–∫–µ—Ç–∞—Ö"
echo "  6. –î–µ—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —Ç–∏–∫–µ—Ç–∞"
echo ""
read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/n) " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "–û—Ç–º–µ–Ω–µ–Ω–æ"
    exit 1
fi

echo "üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π..."
mkdir -p backups/v0.7.1
cp -r bot/handlers backups/v0.7.1/
cp -r backend/api backups/v0.7.1/
cp -r frontend backups/v0.7.1/
echo "‚úÖ –ë—ç–∫–∞–ø—ã —Å–æ–∑–¥–∞–Ω—ã –≤ backups/v0.7.1/"

echo ""
echo "üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤..."

# ========================================
# 1. –ù–æ–≤—ã–π complaint handler —Å –ø—Ä–µ–≤—å—é
# ========================================
cat > bot/handlers/complaint.py << 'COMPLAINTEOF'
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from bot.utils.categories import categories_manager
import logging

logger = logging.getLogger(__name__)
router = Router()

class ComplaintForm(StatesGroup):
    category = State()
    subcategory = State()
    dynamic_field = State()
    preview = State()

def get_back_button():
    return KeyboardButton(text="üîô –ù–∞–∑–∞–¥")

def get_main_menu_button():
    return KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

@router.message(F.text == "üìù –ü–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É")
async def start_complaint(message: types.Message, state: FSMContext):
    categories = categories_manager.get_categories()
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –∫–æ–ª–æ–Ω–∫–∏ –ø–æ 2 –∫–Ω–æ–ø–∫–∏
    buttons = []
    for i in range(0, len(categories), 2):
        row = categories[i:i+2]
        buttons.append([KeyboardButton(text=cat) for cat in row])
    
    buttons.append([get_main_menu_button()])
    
    keyboard = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)
    
    await message.answer(
        "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–±—Ä–∞—â–µ–Ω–∏—è:\n\n"
        "üí° –ü—Ä–æ–∫—Ä—É—Ç–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π",
        reply_markup=keyboard
    )
    await state.set_state(ComplaintForm.category)

@router.message(ComplaintForm.category, F.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main_from_category(message: types.Message, state: FSMContext):
    await state.clear()
    from bot.handlers.start import cmd_start
    await cmd_start(message)

@router.message(ComplaintForm.category)
async def process_category(message: types.Message, state: FSMContext):
    category = message.text
    categories = categories_manager.get_categories()
    
    if category not in categories:
        await message.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö")
        return
    
    fields = categories_manager.get_category_fields(category)
    
    await state.update_data(
        category=category,
        telegram_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        required_fields=fields,
        current_field_index=0,
        collected_data={},
        preview_message_id=None
    )
    
    subcategories = categories_manager.get_subcategories(category)
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ –∫–æ–ª–æ–Ω–∫–∏
    buttons = []
    for i in range(0, len(subcategories), 2):
        row = subcategories[i:i+2]
        buttons.append([KeyboardButton(text=sub) for sub in row])
    
    buttons.append([get_back_button()])
    
    keyboard = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)
    
    await message.answer(
        f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n\n"
        "üîñ –£—Ç–æ—á–Ω–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É:",
        reply_markup=keyboard
    )
    await state.set_state(ComplaintForm.subcategory)

@router.message(ComplaintForm.subcategory, F.text == "üîô –ù–∞–∑–∞–¥")
async def back_to_categories(message: types.Message, state: FSMContext):
    await start_complaint(message, state)

@router.message(ComplaintForm.subcategory)
async def process_subcategory(message: types.Message, state: FSMContext):
    await state.update_data(subcategory=message.text)
    await ask_next_field(message, state)

async def update_preview(message: types.Message, state: FSMContext):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–µ–≤—å—é –∂–∞–ª–æ–±—ã"""
    data = await state.get_data()
    collected_data = data.get('collected_data', {})
    
    preview_text = "üìù –ü–†–ï–î–ü–†–û–°–ú–û–¢–†:\n\n"
    preview_text += f"üìÇ {data.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
    preview_text += f"üîñ {data.get('subcategory', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
    
    for field_name, value in collected_data.items():
        if value is None:
            continue
        
        field_def = categories_manager.get_field_definition(field_name)
        label = field_def.get('label', field_name) if field_def else field_name
        
        if field_name == 'photo' and isinstance(value, dict):
            preview_text += f"üì∑ {label}: ‚úÖ\n"
        elif field_name in ['address', 'location'] and isinstance(value, dict):
            preview_text += f"üìç {label}: {value.get('address', '–£–∫–∞–∑–∞–Ω–æ')}\n"
        else:
            preview_text += f"‚Ä¢ {label}: {value}\n"
    
    preview_text += "\n‚úèÔ∏è –í–≤–æ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –ø–æ–ª–µ..."
    
    try:
        prev_msg_id = data.get('preview_message_id')
        if prev_msg_id:
            try:
                await message.bot.edit_message_text(
                    text=preview_text,
                    chat_id=message.chat.id,
                    message_id=prev_msg_id
                )
            except:
                sent = await message.answer(preview_text)
                await state.update_data(preview_message_id=sent.message_id)
        else:
            sent = await message.answer(preview_text)
            await state.update_data(preview_message_id=sent.message_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–µ–≤—å—é: {e}")

async def ask_next_field(message: types.Message, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ –ø–æ–ª–µ"""
    data = await state.get_data()
    required_fields = data.get('required_fields', [])
    current_index = data.get('current_field_index', 0)
    
    await update_preview(message, state)
    
    if current_index >= len(required_fields):
        await show_final_preview(message, state)
        return
    
    field_name = required_fields[current_index]
    field_type = categories_manager.get_field_type(field_name)
    field_prompt = categories_manager.get_field_prompt(field_name)
    is_required = categories_manager.is_field_required(field_name)
    
    await state.update_data(current_field_name=field_name)
    
    buttons = []
    
    if field_type == 'phone':
        buttons.append([KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω", request_contact=True)])
    elif field_type == 'address_or_location':
        buttons.append([KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)])
        buttons.append([KeyboardButton(text="‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é")])
    elif field_type == 'location':
        buttons.append([KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)])
    
    if not is_required:
        buttons.append([KeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")])
    
    buttons.append([get_back_button()])
    
    keyboard = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)
    
    await message.answer(field_prompt, reply_markup=keyboard)
    await state.set_state(ComplaintForm.dynamic_field)

async def show_final_preview(message: types.Message, state: FSMContext):
    """–§–∏–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–µ–≤—å—é —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º"""
    data = await state.get_data()
    collected_data = data.get('collected_data', {})
    
    preview_text = "‚úÖ –ü–†–û–í–ï–†–¨–¢–ï –í–ê–®–ï –û–ë–†–ê–©–ï–ù–ò–ï:\n\n"
    preview_text += f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data.get('category')}\n"
    preview_text += f"üîñ –¢–∏–ø: {data.get('subcategory')}\n\n"
    
    for field_name, value in collected_data.items():
        if value is None:
            continue
        
        field_def = categories_manager.get_field_definition(field_name)
        label = field_def.get('label', field_name) if field_def else field_name
        
        if field_name == 'photo' and isinstance(value, dict):
            preview_text += f"üì∑ {label}: –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ\n"
        elif field_name in ['address', 'location'] and isinstance(value, dict):
            preview_text += f"üìç {label}: {value.get('address')}\n"
        else:
            preview_text += f"‚Ä¢ {label}: {value}\n"
    
    preview_text += "\nüîç –í—Å—ë –≤–µ—Ä–Ω–æ?"
    
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥"), KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]
        ],
        resize_keyboard=True
    )
    
    await message.answer(preview_text, reply_markup=keyboard)
    await state.set_state(ComplaintForm.preview)

@router.message(ComplaintForm.preview, F.text == "‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å")
async def confirm_and_send(message: types.Message, state: FSMContext):
    await finish_complaint(message, state)

@router.message(ComplaintForm.preview, F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
async def cancel_complaint(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("‚ùå –û–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=ReplyKeyboardRemove())
    from bot.handlers.start import cmd_start
    await cmd_start(message)

@router.message(ComplaintForm.preview, F.text == "üîô –ù–∞–∑–∞–¥")
async def back_from_preview(message: types.Message, state: FSMContext):
    data = await state.get_data()
    required_fields = data.get('required_fields', [])
    if required_fields:
        await state.update_data(current_field_index=len(required_fields) - 1)
        await ask_next_field(message, state)
    else:
        await process_category(message, state)

@router.message(ComplaintForm.dynamic_field, F.text == "üîô –ù–∞–∑–∞–¥")
async def back_from_field(message: types.Message, state: FSMContext):
    data = await state.get_data()
    current_index = data.get('current_field_index', 0)
    
    if current_index > 0:
        await state.update_data(current_field_index=current_index - 1)
        await ask_next_field(message, state)
    else:
        await process_category(message, state)

@router.message(ComplaintForm.dynamic_field, F.contact)
async def process_contact_field(message: types.Message, state: FSMContext):
    data = await state.get_data()
    field_name = data.get('current_field_name')
    collected_data = data.get('collected_data', {})
    
    collected_data[field_name] = message.contact.phone_number
    
    await state.update_data(
        collected_data=collected_data,
        current_field_index=data.get('current_field_index', 0) + 1
    )
    
    await ask_next_field(message, state)

@router.message(ComplaintForm.dynamic_field, F.photo)
async def process_photo_field(message: types.Message, state: FSMContext):
    data = await state.get_data()
    field_name = data.get('current_field_name')
    collected_data = data.get('collected_data', {})
    
    photo = message.photo[-1]
    collected_data[field_name] = {
        'file_id': photo.file_id,
        'file_unique_id': photo.file_unique_id
    }
    
    await state.update_data(
        collected_data=collected_data,
        current_field_index=data.get('current_field_index', 0) + 1
    )
    
    await ask_next_field(message, state)

@router.message(ComplaintForm.dynamic_field, F.location)
async def process_location_field(message: types.Message, state: FSMContext):
    data = await state.get_data()
    field_name = data.get('current_field_name')
    collected_data = data.get('collected_data', {})
    
    collected_data[field_name] = {
        'type': 'location',
        'latitude': message.location.latitude,
        'longitude': message.location.longitude,
        'address': f"üìç {message.location.latitude:.6f}, {message.location.longitude:.6f}"
    }
    
    await state.update_data(
        collected_data=collected_data,
        current_field_index=data.get('current_field_index', 0) + 1
    )
    
    await ask_next_field(message, state)

@router.message(ComplaintForm.dynamic_field, F.text == "‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é")
async def ask_address_manual(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å:", reply_markup=ReplyKeyboardRemove())

@router.message(ComplaintForm.dynamic_field, F.text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
async def skip_field(message: types.Message, state: FSMContext):
    data = await state.get_data()
    field_name = data.get('current_field_name')
    collected_data = data.get('collected_data', {})
    
    collected_data[field_name] = None
    
    await state.update_data(
        collected_data=collected_data,
        current_field_index=data.get('current_field_index', 0) + 1
    )
    
    await ask_next_field(message, state)

@router.message(ComplaintForm.dynamic_field)
async def process_text_field(message: types.Message, state: FSMContext):
    data = await state.get_data()
    field_name = data.get('current_field_name')
    collected_data = data.get('collected_data', {})
    
    collected_data[field_name] = message.text
    
    await state.update_data(
        collected_data=collected_data,
        current_field_index=data.get('current_field_index', 0) + 1
    )
    
    await ask_next_field(message, state)

async def finish_complaint(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∂–∞–ª–æ–±—ã"""
    data = await state.get_data()
    collected_data = data.get('collected_data', {})
    
    complaint_data = {
        'telegram_id': data['telegram_id'],
        'username': data.get('username'),
        'first_name': data.get('first_name'),
        'category': data['category'],
        'subcategory': data.get('subcategory', ''),
        'description': collected_data.get('description', ''),
        'route_number': collected_data.get('route_number'),
        'vehicle_number': collected_data.get('vehicle_number'),
        'contact_phone': collected_data.get('contact_phone'),
        'address': None,
        'latitude': None,
        'longitude': None,
        'photos': None
    }
    
    if 'address' in collected_data and collected_data['address']:
        if isinstance(collected_data['address'], dict):
            complaint_data['latitude'] = collected_data['address'].get('latitude')
            complaint_data['longitude'] = collected_data['address'].get('longitude')
            complaint_data['address'] = collected_data['address'].get('address')
        else:
            complaint_data['address'] = collected_data['address']
    
    if 'location' in collected_data and collected_data['location']:
        if isinstance(collected_data['location'], dict):
            complaint_data['latitude'] = collected_data['location'].get('latitude')
            complaint_data['longitude'] = collected_data['location'].get('longitude')
            if not complaint_data['address']:
                complaint_data['address'] = collected_data['location'].get('address')
    
    if 'photo' in collected_data and collected_data['photo']:
        if isinstance(collected_data['photo'], dict):
            complaint_data['photos'] = collected_data['photo']['file_id']
    
    try:
        from sqlalchemy.ext.asyncio import AsyncSession
        from backend.db.database import AsyncSessionLocal
        from backend.db import crud
        
        async with AsyncSessionLocal() as db:
            user = await crud.get_user_by_telegram_id(db, complaint_data['telegram_id'])
            if not user:
                user = await crud.create_user(
                    db, 
                    complaint_data['telegram_id'],
                    username=complaint_data['username'],
                    first_name=complaint_data['first_name']
                )
            
            full_description_parts = []
            if complaint_data.get('route_number'):
                full_description_parts.append(f"üöå –ú–∞—Ä—à—Ä—É—Ç: {complaint_data['route_number']}")
            if complaint_data.get('vehicle_number'):
                full_description_parts.append(f"üöó –¢–°: {complaint_data['vehicle_number']}")
            full_description_parts.append(f"üîñ {complaint_data['subcategory']}")
            full_description_parts.append(f"üìù {complaint_data['description']}")
            if complaint_data.get('contact_phone'):
                full_description_parts.append(f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {complaint_data['contact_phone']}")
            
            full_description = "\n".join(full_description_parts)
            
            complaint = await crud.create_complaint(
                db,
                user_id=user.id,
                category=complaint_data['category'],
                description=full_description,
                address=complaint_data.get('address'),
                latitude=complaint_data.get('latitude'),
                longitude=complaint_data.get('longitude'),
                photos=complaint_data.get('photos'),
                priority='medium'
            )
            
            complaint_id = complaint.id
            logger.info(f"‚úÖ –ñ–∞–ª–æ–±–∞ #{complaint_id} —Å–æ–∑–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {complaint_data['telegram_id']}")
    except Exception as e:
        complaint_id = "???"
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∂–∞–ª–æ–±—ã: {e}", exc_info=True)
    
    text_parts = [f"‚úÖ –û–±—Ä–∞—â–µ–Ω–∏–µ #{complaint_id} –ø—Ä–∏–Ω—è—Ç–æ!\n"]
    text_parts.append(f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {complaint_data['category']}")
    text_parts.append(f"üîñ –¢–∏–ø: {complaint_data['subcategory']}")
    
    if complaint_data.get('route_number'):
        text_parts.append(f"üöå –ú–∞—Ä—à—Ä—É—Ç: {complaint_data['route_number']}")
    if complaint_data.get('vehicle_number'):
        text_parts.append(f"üöó –¢–°: {complaint_data['vehicle_number']}")
    if complaint_data.get('description'):
        text_parts.append(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {complaint_data['description']}")
    if complaint_data.get('address'):
        text_parts.append(f"üìç –ê–¥—Ä–µ—Å: {complaint_data['address']}")
    if complaint_data.get('contact_phone'):
        text_parts.append(f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {complaint_data['contact_phone']}")
    if complaint_data.get('photos'):
        text_parts.append("üì∑ –§–æ—Ç–æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ")
    
    text_parts.append("\n–ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–∞—à—É –∂–∞–ª–æ–±—É –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
    text_parts.append("–û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Å—Ç–∞—Ç—É—Å –≤ —Ä–∞–∑–¥–µ–ª–µ üìã –ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è")
    
    text = "\n".join(text_parts)
    
    await message.answer(text, reply_markup=ReplyKeyboardRemove())
    await state.clear()
    
    from bot.handlers.start import cmd_start
    await cmd_start(message)

@router.message(F.text == "‚úÖ –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å")
async def start_gratitude(message: types.Message, state: FSMContext):
    await state.update_data(
        category="‚úÖ –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å",
        subcategory="‚úÖ –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å",
        telegram_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        required_fields=['description'],
        current_field_index=0,
        collected_data={}
    )
    
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[get_back_button()]],
        resize_keyboard=True
    )
    
    await message.answer(
        "‚úÖ –ö–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å? –û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ:",
        reply_markup=keyboard
    )
    await state.set_state(ComplaintForm.dynamic_field)
    await state.update_data(current_field_name='description')

@router.message(F.text == "üí¨ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")
async def start_feedback(message: types.Message, state: FSMContext):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é")],
            [KeyboardButton(text="üêõ –°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ")],
            [get_back_button()]
        ],
        resize_keyboard=True
    )
    
    await state.update_data(
        category="üì¢ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å",
        telegram_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name
    )
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:", reply_markup=keyboard)
    await state.set_state(ComplaintForm.subcategory)

@router.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def help_command(message: types.Message):
    categories = categories_manager.get_categories()
    categories_text = "\n".join([f"‚Ä¢ {cat}" for cat in categories[:5]])
    
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[get_main_menu_button()]],
        resize_keyboard=True
    )
    
    await message.answer(
        f"‚ÑπÔ∏è –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç:\n\n"
        f"üìù –ü–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ\n"
        f"üìã –ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤ Mini App\n"
        f"‚ÑπÔ∏è –ü–æ–º–æ—â—å - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        f"üìÇ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n{categories_text}\n...–∏ –¥—Ä—É–≥–∏–µ (–≤—Å–µ–≥–æ {len(categories)})\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –±–æ—Ç–∞.",
        reply_markup=keyboard
    )
COMPLAINTEOF

echo "‚úÖ bot/handlers/complaint.py"

# ========================================
# 2. Endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ
# ========================================
cat > backend/api/v1/photos.py << 'PHOTOEOF'
from fastapi import APIRouter, HTTPException, Depends
from fastapi.responses import StreamingResponse
from backend.core.config import settings
import httpx
import io
import logging

logger = logging.getLogger(__name__)
router = APIRouter()

@router.get("/{file_id}")
async def get_photo(file_id: str):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ñ–æ—Ç–æ –∏–∑ Telegram –ø–æ file_id
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        async with httpx.AsyncClient() as client:
            file_response = await client.get(
                f"https://api.telegram.org/bot{settings.BOT_TOKEN}/getFile",
                params={"file_id": file_id}
            )
            file_data = file_response.json()
            
            if not file_data.get("ok"):
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {file_data}")
                raise HTTPException(status_code=404, detail="Photo not found")
            
            file_path = file_data["result"]["file_path"]
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            photo_url = f"https://api.telegram.org/file/bot{settings.BOT_TOKEN}/{file_path}"
            photo_response = await client.get(photo_url)
            
            if photo_response.status_code != 200:
                raise HTTPException(status_code=404, detail="Photo not found")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –ø–æ—Ç–æ–∫
            return StreamingResponse(
                io.BytesIO(photo_response.content),
                media_type="image/jpeg",
                headers={"Cache-Control": "public, max-age=86400"}
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ {file_id}: {e}")
        raise HTTPException(status_code=500, detail="Failed to fetch photo")
PHOTOEOF

echo "‚úÖ backend/api/v1/photos.py"

# –ü–æ–¥–∫–ª—é—á–∞–µ–º photos router –≤ main.py
sed -i 's/from backend.api.v1 import auth, complaints, users, employees, websocket/from backend.api.v1 import auth, complaints, users, employees, websocket, photos/' backend/main.py
sed -i '/app.include_router(websocket.router/a app.include_router(photos.router, prefix="/api/v1/photos", tags=["photos"])' backend/main.py

echo "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω photos router –≤ backend/main.py"

# ========================================
# 3. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ frontend residents
# ========================================
cat > frontend/residents/index.html << 'RESIDENTSEOF'
<!DOCTYPE html>
<html><head><meta charset="UTF-8"><title>–ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è</title>
<script src="https://telegram.org/js/telegram-web-app.js"></script>
<style>
body{font-family:sans-serif;padding:16px;background:#f5f5f5;margin:0}
.card{background:#fff;padding:16px;margin:12px 0;border-radius:8px;box-shadow:0 1px 3px rgba(0,0,0,0.1)}
.category{font-weight:600;margin-bottom:8px}
.photo{max-width:100%;border-radius:8px;margin:8px 0}
.btn{background:#0088cc;color:#fff;border:none;padding:12px;border-radius:8px;width:100%;margin-top:20px;font-size:16px}
</style>
</head><body><h2>üìã –ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è</h2><div id="list">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
<button class="btn" onclick="window.Telegram.WebApp.close()">–ó–∞–∫—Ä—ã—Ç—å</button>
<script>
const tg=window.Telegram.WebApp;tg.ready();tg.expand();
const urlParams=new URLSearchParams(window.location.search);
const userId=tg.initDataUnsafe?.user?.id||urlParams.get('user_id');

async function load(){
  try{
    if(!userId){document.getElementById('list').innerHTML='<div class="card">‚ùå –ù–µ—Ç user ID</div>';return;}
    const res=await fetch(`/api/v1/complaints/my?user_id=${userId}`);
    if(!res.ok){document.getElementById('list').innerHTML=`<div class="card">‚ùå –û—à–∏–±–∫–∞ ${res.status}</div>`;return;}
    const data=await res.json();
    if(data.length===0){document.getElementById('list').innerHTML='<div class="card">–ü–æ–∫–∞ –Ω–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–π</div>';return;}
    document.getElementById('list').innerHTML=data.map(c=>{
      let html=`<div class="card"><div class="category">${c.category}</div>`;
      if(c.photos){html+=`<img class="photo" src="/api/v1/photos/${c.photos}" alt="–§–æ—Ç–æ">`;}
      html+=`<div style="margin:8px 0;white-space:pre-wrap">${c.description}</div>`;
      html+=`<small>${new Date(c.created_at).toLocaleString('ru-RU')}</small></div>`;
      return html;
    }).join('');
  }catch(e){document.getElementById('list').innerHTML=`<div class="card">‚ùå –û—à–∏–±–∫–∞: ${e.message}</div>`;}
}
load();
</script></body></html>
RESIDENTSEOF

echo "‚úÖ frontend/residents/index.html (—Å —Ñ–æ—Ç–æ)"

echo ""
echo "================================"
echo "‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ v0.8.0 –ø—Ä–∏–º–µ–Ω–µ–Ω–æ!"
echo "================================"
echo ""
echo "üìù –ò–∑–º–µ–Ω–µ–Ω–∏—è:"
echo "  ‚úÖ –ö–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' –≤–æ –≤—Å–µ—Ö –º–µ–Ω—é"
echo "  ‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ 2 –≤ —Ä—è–¥"
echo "  ‚úÖ –ü—Ä–µ–≤—å—é –∂–∞–ª–æ–±—ã –Ω–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ"
echo "  ‚úÖ –ö–Ω–æ–ø–∫–∞ '–í—Å—ë –≤–µ—Ä–Ω–æ, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å'"
echo "  ‚úÖ Endpoint /api/v1/photos/{file_id}"
echo "  ‚úÖ –§–æ—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ Mini App"
echo ""
echo "üöÄ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:"
echo "  bash run_dev.sh"
echo ""
