{
  "version": "0.8.0",
  "description": "–ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥, –ø—Ä–µ–≤—å—é –∂–∞–ª–æ–±—ã, —Ñ–æ—Ç–æ –≤ —Ç–∏–∫–µ—Ç–∞—Ö",
  "files": {
    "run_bot_console.sh": "#!/bin/bash\necho \"üêõ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏ (–ª–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å)\"\necho \"–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\"\necho \"\"\ncd \"$(dirname \"$0\")\"\nexport PYTHONUNBUFFERED=1\nPYTHONPATH=. poetry run python run_bot.py",
    
    "bot/handlers/complaint_new.py": "from aiogram import Router, types, F\nfrom aiogram.fsm.context import FSMContext\nfrom aiogram.fsm.state import State, StatesGroup\nfrom aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton\nfrom bot.utils.categories import categories_manager\nimport logging\n\nlogger = logging.getLogger(__name__)\nrouter = Router()\n\nclass ComplaintForm(StatesGroup):\n    category = State()\n    subcategory = State()\n    dynamic_field = State()\n    preview = State()\n\ndef get_back_button():\n    return KeyboardButton(text=\"üîô –ù–∞–∑–∞–¥\")\n\ndef get_main_menu_button():\n    return KeyboardButton(text=\"üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\")\n\n@router.message(F.text == \"üìù –ü–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É\")\nasync def start_complaint(message: types.Message, state: FSMContext):\n    categories = categories_manager.get_categories()\n    \n    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –∫–æ–ª–æ–Ω–∫–∏ –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞\n    buttons = []\n    for i in range(0, len(categories), 2):\n        row = categories[i:i+2]\n        buttons.append([KeyboardButton(text=cat) for cat in row])\n    \n    buttons.append([get_main_menu_button()])\n    \n    keyboard = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)\n    \n    await message.answer(\n        \"üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–±—Ä–∞—â–µ–Ω–∏—è:\\n\\n\"\n        \"üìå –ü—Ä–æ–∫—Ä—É—Ç–∏—Ç–µ —Å–ø–∏—Å–æ–∫, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\",\n        reply_markup=keyboard\n    )\n    await state.set_state(ComplaintForm.category)\n\n@router.message(ComplaintForm.category, F.text == \"üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\")\nasync def back_to_main_from_category(message: types.Message, state: FSMContext):\n    await state.clear()\n    from bot.handlers.start import cmd_start\n    await cmd_start(message)\n\n@router.message(ComplaintForm.category)\nasync def process_category(message: types.Message, state: FSMContext):\n    category = message.text\n    categories = categories_manager.get_categories()\n    \n    if category not in categories:\n        await message.answer(\"‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö\")\n        return\n    \n    fields = categories_manager.get_category_fields(category)\n    \n    await state.update_data(\n        category=category,\n        telegram_id=message.from_user.id,\n        username=message.from_user.username,\n        first_name=message.from_user.first_name,\n        required_fields=fields,\n        current_field_index=0,\n        collected_data={},\n        preview_message_id=None\n    )\n    \n    subcategories = categories_manager.get_subcategories(category)\n    \n    # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ –∫–æ–ª–æ–Ω–∫–∏\n    buttons = []\n    for i in range(0, len(subcategories), 2):\n        row = subcategories[i:i+2]\n        buttons.append([KeyboardButton(text=sub) for sub in row])\n    \n    buttons.append([get_back_button()])\n    \n    keyboard = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)\n    \n    await message.answer(\n        f\"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\\n\\n\"\n        \"üîñ –£—Ç–æ—á–Ω–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É:\",\n        reply_markup=keyboard\n    )\n    await state.set_state(ComplaintForm.subcategory)\n\n@router.message(ComplaintForm.subcategory, F.text == \"üîô –ù–∞–∑–∞–¥\")\nasync def back_to_categories(message: types.Message, state: FSMContext):\n    await start_complaint(message, state)\n\n@router.message(ComplaintForm.subcategory)\nasync def process_subcategory(message: types.Message, state: FSMContext):\n    await state.update_data(subcategory=message.text)\n    await ask_next_field(message, state)\n\nasync def update_preview(message: types.Message, state: FSMContext):\n    \"\"\"–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–µ–≤—å—é –∂–∞–ª–æ–±—ã\"\"\"\n    data = await state.get_data()\n    collected_data = data.get('collected_data', {})\n    \n    preview_text = \"üìù –ü–†–ï–î–ü–†–û–°–ú–û–¢–† –û–ë–†–ê–©–ï–ù–ò–Ø:\\n\\n\"\n    preview_text += f\"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\\n\"\n    preview_text += f\"üîñ –¢–∏–ø: {data.get('subcategory', '–ù–µ —É–∫–∞–∑–∞–Ω')}\\n\\n\"\n    \n    for field_name, value in collected_data.items():\n        if value is None:\n            continue\n        \n        field_def = categories_manager.get_field_definition(field_name)\n        label = field_def.get('label', field_name) if field_def else field_name\n        \n        if field_name == 'photo' and isinstance(value, dict):\n            preview_text += f\"üì∑ {label}: –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ\\n\"\n        elif field_name in ['address', 'location'] and isinstance(value, dict):\n            preview_text += f\"üìç {label}: {value.get('address', '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —É–∫–∞–∑–∞–Ω—ã')}\\n\"\n        else:\n            preview_text += f\"‚Ä¢ {label}: {value}\\n\"\n    \n    preview_text += \"\\n‚úèÔ∏è –í–≤–æ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –ø–æ–ª–µ...\"\n    \n    try:\n        prev_msg_id = data.get('preview_message_id')\n        if prev_msg_id:\n            try:\n                await message.bot.edit_message_text(\n                    text=preview_text,\n                    chat_id=message.chat.id,\n                    message_id=prev_msg_id\n                )\n            except:\n                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ\n                sent = await message.answer(preview_text)\n                await state.update_data(preview_message_id=sent.message_id)\n        else:\n            sent = await message.answer(preview_text)\n            await state.update_data(preview_message_id=sent.message_id)\n    except Exception as e:\n        logger.error(f\"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–µ–≤—å—é: {e}\")\n\nasync def ask_next_field(message: types.Message, state: FSMContext):\n    \"\"\"–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ –ø–æ–ª–µ\"\"\"\n    data = await state.get_data()\n    required_fields = data.get('required_fields', [])\n    current_index = data.get('current_field_index', 0)\n    \n    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é\n    await update_preview(message, state)\n    \n    if current_index >= len(required_fields):\n        await show_final_preview(message, state)\n        return\n    \n    field_name = required_fields[current_index]\n    field_type = categories_manager.get_field_type(field_name)\n    field_prompt = categories_manager.get_field_prompt(field_name)\n    is_required = categories_manager.is_field_required(field_name)\n    \n    await state.update_data(current_field_name=field_name)\n    \n    buttons = []\n    \n    if field_type == 'phone':\n        buttons.append([KeyboardButton(text=\"üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω\", request_contact=True)])\n    elif field_type == 'address_or_location':\n        buttons.append([KeyboardButton(text=\"üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é\", request_location=True)])\n        buttons.append([KeyboardButton(text=\"‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é\")])\n    elif field_type == 'location':\n        buttons.append([KeyboardButton(text=\"üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é\", request_location=True)])\n    \n    if not is_required:\n        buttons.append([KeyboardButton(text=\"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å\")])\n    \n    buttons.append([get_back_button()])\n    \n    keyboard = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)\n    \n    await message.answer(field_prompt, reply_markup=keyboard)\n    await state.set_state(ComplaintForm.dynamic_field)\n\nasync def show_final_preview(message: types.Message, state: FSMContext):\n    \"\"\"–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–µ–≤—å—é —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\"\"\"\n    data = await state.get_data()\n    collected_data = data.get('collected_data', {})\n    \n    preview_text = \"‚úÖ –ü–†–û–í–ï–†–¨–¢–ï –í–ê–®–ï –û–ë–†–ê–©–ï–ù–ò–ï:\\n\\n\"\n    preview_text += f\"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data.get('category')}\\n\"\n    preview_text += f\"üîñ –¢–∏–ø: {data.get('subcategory')}\\n\\n\"\n    \n    for field_name, value in collected_data.items():\n        if value is None:\n            continue\n        \n        field_def = categories_manager.get_field_definition(field_name)\n        label = field_def.get('label', field_name) if field_def else field_name\n        \n        if field_name == 'photo' and isinstance(value, dict):\n            preview_text += f\"üì∑ {label}: –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ\\n\"\n        elif field_name in ['address', 'location'] and isinstance(value, dict):\n            preview_text += f\"üìç {label}: {value.get('address')}\\n\"\n        else:\n            preview_text += f\"‚Ä¢ {label}: {value}\\n\"\n    \n    preview_text += \"\\nüîç –í—Å—ë –≤–µ—Ä–Ω–æ?\"\n    \n    keyboard = ReplyKeyboardMarkup(\n        keyboard=[\n            [KeyboardButton(text=\"‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å\")],\n            [KeyboardButton(text=\"üîô –ù–∞–∑–∞–¥\"), KeyboardButton(text=\"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å\")]\n        ],\n        resize_keyboard=True\n    )\n    \n    await message.answer(preview_text, reply_markup=keyboard)\n    await state.set_state(ComplaintForm.preview)\n\n@router.message(ComplaintForm.preview, F.text == \"‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å\")\nasync def confirm_and_send(message: types.Message, state: FSMContext):\n    await finish_complaint(message, state)\n\n@router.message(ComplaintForm.preview, F.text == \"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å\")\nasync def cancel_complaint(message: types.Message, state: FSMContext):\n    await state.clear()\n    await message.answer(\n        \"‚ùå –û–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ\",\n        reply_markup=ReplyKeyboardRemove()\n    )\n    from bot.handlers.start import cmd_start\n    await cmd_start(message)\n\n@router.message(ComplaintForm.dynamic_field, F.text == \"üîô –ù–∞–∑–∞–¥\")\nasync def back_from_field(message: types.Message, state: FSMContext):\n    data = await state.get_data()\n    current_index = data.get('current_field_index', 0)\n    \n    if current_index > 0:\n        # –í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –ø–æ–ª—é\n        await state.update_data(current_field_index=current_index - 1)\n        await ask_next_field(message, state)\n    else:\n        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n        await process_category(message, state)\n\n@router.message(ComplaintForm.dynamic_field, F.contact)\nasync def process_contact_field(message: types.Message, state: FSMContext):\n    data = await state.get_data()\n    field_name = data.get('current_field_name')\n    collected_data = data.get('collected_data', {})\n    \n    collected_data[field_name] = message.contact.phone_number\n    \n    await state.update_data(\n        collected_data=collected_data,\n        current_field_index=data.get('current_field_index', 0) + 1\n    )\n    \n    await ask_next_field(message, state)\n\n@router.message(ComplaintForm.dynamic_field, F.photo)\nasync def process_photo_field(message: types.Message, state: FSMContext):\n    data = await state.get_data()\n    field_name = data.get('current_field_name')\n    collected_data = data.get('collected_data', {})\n    \n    photo = message.photo[-1]\n    collected_data[field_name] = {\n        'file_id': photo.file_id,\n        'file_unique_id': photo.file_unique_id\n    }\n    \n    await state.update_data(\n        collected_data=collected_data,\n        current_field_index=data.get('current_field_index', 0) + 1\n    )\n    \n    await ask_next_field(message, state)\n\n@router.message(ComplaintForm.dynamic_field, F.location)\nasync def process_location_field(message: types.Message, state: FSMContext):\n    data = await state.get_data()\n    field_name = data.get('current_field_name')\n    collected_data = data.get('collected_data', {})\n    \n    collected_data[field_name] = {\n        'type': 'location',\n        'latitude': message.location.latitude,\n        'longitude': message.location.longitude,\n        'address': f\"üìç {message.location.latitude:.6f}, {message.location.longitude:.6f}\"\n    }\n    \n    await state.update_data(\n        collected_data=collected_data,\n        current_field_index=data.get('current_field_index', 0) + 1\n    )\n    \n    await ask_next_field(message, state)\n\n@router.message(ComplaintForm.dynamic_field, F.text == \"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å\")\nasync def skip_field(message: types.Message, state: FSMContext):\n    data = await state.get_data()\n    field_name = data.get('current_field_name')\n    collected_data = data.get('collected_data', {})\n    \n    collected_data[field_name] = None\n    \n    await state.update_data(\n        collected_data=collected_data,\n        current_field_index=data.get('current_field_index', 0) + 1\n    )\n    \n    await ask_next_field(message, state)\n\n@router.message(ComplaintForm.dynamic_field)\nasync def process_text_field(message: types.Message, state: FSMContext):\n    data = await state.get_data()\n    field_name = data.get('current_field_name')\n    collected_data = data.get('collected_data', {})\n    \n    collected_data[field_name] = message.text\n    \n    await state.update_data(\n        collected_data=collected_data,\n        current_field_index=data.get('current_field_index', 0) + 1\n    )\n    \n    await ask_next_field(message, state)\n\nasync def finish_complaint(message: types.Message, state: FSMContext):\n    \"\"\"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∂–∞–ª–æ–±—ã\"\"\"\n    data = await state.get_data()\n    collected_data = data.get('collected_data', {})\n    \n    complaint_data = {\n        'telegram_id': data['telegram_id'],\n        'username': data.get('username'),\n        'first_name': data.get('first_name'),\n        'category': data['category'],\n        'subcategory': data.get('subcategory', ''),\n        'description': collected_data.get('description', ''),\n        'route_number': collected_data.get('route_number'),\n        'vehicle_number': collected_data.get('vehicle_number'),\n        'contact_phone': collected_data.get('contact_phone'),\n        'address': None,\n        'latitude': None,\n        'longitude': None,\n        'photos': None\n    }\n    \n    if 'address' in collected_data and collected_data['address']:\n        if isinstance(collected_data['address'], dict):\n            complaint_data['latitude'] = collected_data['address'].get('latitude')\n            complaint_data['longitude'] = collected_data['address'].get('longitude')\n            complaint_data['address'] = collected_data['address'].get('address')\n        else:\n            complaint_data['address'] = collected_data['address']\n    \n    if 'location' in collected_data and collected_data['location']:\n        if isinstance(collected_data['location'], dict):\n            complaint_data['latitude'] = collected_data['location'].get('latitude')\n            complaint_data['longitude'] = collected_data['location'].get('longitude')\n            if not complaint_data['address']:\n                complaint_data['address'] = collected_data['location'].get('address')\n    \n    if 'photo' in collected_data and collected_data['photo']:\n        if isinstance(collected_data['photo'], dict):\n            complaint_data['photos'] = collected_data['photo']['file_id']\n    \n    try:\n        from sqlalchemy.ext.asyncio import AsyncSession\n        from backend.db.database import AsyncSessionLocal\n        from backend.db import crud\n        \n        async with AsyncSessionLocal() as db:\n            user = await crud.get_user_by_telegram_id(db, complaint_data['telegram_id'])\n            if not user:\n                user = await crud.create_user(\n                    db, \n                    complaint_data['telegram_id'],\n                    username=complaint_data['username'],\n                    first_name=complaint_data['first_name']\n                )\n            \n            full_description_parts = []\n            if complaint_data.get('route_number'):\n                full_description_parts.append(f\"üöå –ú–∞—Ä—à—Ä—É—Ç: {complaint_data['route_number']}\")\n            if complaint_data.get('vehicle_number'):\n                full_description_parts.append(f\"üöó –¢–°: {complaint_data['vehicle_number']}\")\n            full_description_parts.append(f\"üîñ {complaint_data['subcategory']}\")\n            full_description_parts.append(f\"üìù {complaint_data['description']}\")\n            if complaint_data.get('contact_phone'):\n                full_description_parts.append(f\"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {complaint_data['contact_phone']}\")\n            \n            full_description = \"\\n\".join(full_description_parts)\n            \n            complaint = await crud.create_complaint(\n                db,\n                user_id=user.id,\n                category=complaint_data['category'],\n                description=full_description,\n                address=complaint_data.get('address'),\n                latitude=complaint_data.get('latitude'),\n                longitude=complaint_data.get('longitude'),\n                photos=complaint_data.get('photos'),\n                priority='medium'\n            )\n            \n            complaint_id = complaint.id\n            logger.info(f\"‚úÖ –ñ–∞–ª–æ–±–∞ #{complaint_id} —Å–æ–∑–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {complaint_data['telegram_id']}\")\n    except Exception as e:\n        complaint_id = \"???\"\n        logger.error(f\"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∂–∞–ª–æ–±—ã: {e}\", exc_info=True)\n    \n    text_parts = [f\"‚úÖ –û–±—Ä–∞—â–µ–Ω–∏–µ #{complaint_id} –ø—Ä–∏–Ω—è—Ç–æ!\\n\"]\n    text_parts.append(f\"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {complaint_data['category']}\")\n    text_parts.append(f\"üîñ –¢–∏–ø: {complaint_data['subcategory']}\")\n    \n    if complaint_data.get('route_number'):\n        text_parts.append(f\"üöå –ú–∞—Ä—à—Ä—É—Ç: {complaint_data['route_number']}\")\n    if complaint_data.get('vehicle_number'):\n        text_parts.append(f\"üöó –¢–°: {complaint_data['vehicle_number']}\")\n    if complaint_data.get('description'):\n        text_parts.append(f\"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {complaint_data['description']}\")\n    if complaint_data.get('address'):\n        text_parts.append(f\"üìç –ê–¥—Ä–µ—Å: {complaint_data['address']}\")\n    if complaint_data.get('contact_phone'):\n        text_parts.append(f\"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {complaint_data['contact_phone']}\")\n    if complaint_data.get('photos'):\n        text_parts.append(\"üì∑ –§–æ—Ç–æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ\")\n    \n    text_parts.append(\"\\n–ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–∞—à—É –∂–∞–ª–æ–±—É –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\")\n    text_parts.append(\"–û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Å—Ç–∞—Ç—É—Å –≤ —Ä–∞–∑–¥–µ–ª–µ üìã –ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è\")\n    \n    text = \"\\n\".join(text_parts)\n    \n    await message.answer(text, reply_markup=ReplyKeyboardRemove())\n    await state.clear()\n    \n    from bot.handlers.start import cmd_start\n    await cmd_start(message)"
  }
}
