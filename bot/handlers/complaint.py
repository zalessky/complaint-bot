from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, WebAppInfo
from bot.utils.categories import categories_manager

router = Router()

class ComplaintForm(StatesGroup):
    category = State()
    subcategory = State()
    dynamic_field = State()  # –î–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –ø–æ–ª–µ–π

@router.message(F.text == "üìù –ü–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É")
async def start_complaint(message: types.Message, state: FSMContext):
    categories = categories_manager.get_categories()
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=cat)] for cat in categories],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–±—Ä–∞—â–µ–Ω–∏—è:", reply_markup=keyboard)
    await state.set_state(ComplaintForm.category)

@router.message(ComplaintForm.category)
async def process_category(message: types.Message, state: FSMContext):
    category = message.text
    categories = categories_manager.get_categories()
    
    if category not in categories:
        await message.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—è –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    fields = categories_manager.get_category_fields(category)
    
    await state.update_data(
        category=category,
        telegram_id=message.from_user.id,
        required_fields=fields,
        current_field_index=0,
        collected_data={}
    )
    
    subcategories = categories_manager.get_subcategories(category)
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=sub)] for sub in subcategories],
        resize_keyboard=True
    )
    
    await message.answer("–£—Ç–æ—á–Ω–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É:", reply_markup=keyboard)
    await state.set_state(ComplaintForm.subcategory)

@router.message(ComplaintForm.subcategory)
async def process_subcategory(message: types.Message, state: FSMContext):
    await state.update_data(subcategory=message.text)
    
    # –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –ø–æ–ª–µ–π
    await ask_next_field(message, state)

async def ask_next_field(message: types.Message, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ –ø–æ–ª–µ –∏–∑ —Å–ø–∏—Å–∫–∞"""
    data = await state.get_data()
    required_fields = data.get('required_fields', [])
    current_index = data.get('current_field_index', 0)
    
    if current_index >= len(required_fields):
        # –í—Å–µ –ø–æ–ª—è —Å–æ–±—Ä–∞–Ω—ã - –∑–∞–≤–µ—Ä—à–∞–µ–º
        await finish_complaint(message, state)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –ø–æ–ª–µ
    field_name = required_fields[current_index]
    field_type = categories_manager.get_field_type(field_name)
    field_prompt = categories_manager.get_field_prompt(field_name)
    is_required = categories_manager.is_field_required(field_name)
    
    await state.update_data(current_field_name=field_name)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ–ª—è
    if field_type == 'address_or_location':
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)],
                [KeyboardButton(text="‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é")],
                [KeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")] if not is_required else []
            ],
            resize_keyboard=True
        )
    elif field_type == 'location':
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)],
                [KeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")] if not is_required else []
            ],
            resize_keyboard=True
        )
    else:
        # –û–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")] if not is_required else []
            ],
            resize_keyboard=True
        ) if not is_required else ReplyKeyboardRemove()
    
    await message.answer(field_prompt, reply_markup=keyboard)
    await state.set_state(ComplaintForm.dynamic_field)

@router.message(ComplaintForm.dynamic_field, F.location)
async def process_location_field(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
    data = await state.get_data()
    field_name = data.get('current_field_name')
    collected_data = data.get('collected_data', {})
    
    collected_data[field_name] = {
        'type': 'location',
        'latitude': message.location.latitude,
        'longitude': message.location.longitude,
        'address': f"üìç {message.location.latitude:.6f}, {message.location.longitude:.6f}"
    }
    
    await state.update_data(
        collected_data=collected_data,
        current_field_index=data.get('current_field_index', 0) + 1
    )
    
    await ask_next_field(message, state)

@router.message(ComplaintForm.dynamic_field, F.text == "‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é")
async def ask_address_manual(message: types.Message, state: FSMContext):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å:",
        reply_markup=ReplyKeyboardRemove()
    )

@router.message(ComplaintForm.dynamic_field, F.text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
async def skip_field(message: types.Message, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—è"""
    data = await state.get_data()
    field_name = data.get('current_field_name')
    collected_data = data.get('collected_data', {})
    
    collected_data[field_name] = None
    
    await state.update_data(
        collected_data=collected_data,
        current_field_index=data.get('current_field_index', 0) + 1
    )
    
    await ask_next_field(message, state)

@router.message(ComplaintForm.dynamic_field)
async def process_text_field(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è"""
    data = await state.get_data()
    field_name = data.get('current_field_name')
    collected_data = data.get('collected_data', {})
    
    collected_data[field_name] = message.text
    
    await state.update_data(
        collected_data=collected_data,
        current_field_index=data.get('current_field_index', 0) + 1
    )
    
    await ask_next_field(message, state)

async def finish_complaint(message: types.Message, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∂–∞–ª–æ–±—ã"""
    data = await state.get_data()
    collected_data = data.get('collected_data', {})
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    complaint_data = {
        'telegram_id': data['telegram_id'],
        'category': data['category'],
        'subcategory': data.get('subcategory', ''),
        'description': collected_data.get('description', ''),
        'route_number': collected_data.get('route_number'),
        'vehicle_number': collected_data.get('vehicle_number'),
        'address': None,
        'latitude': None,
        'longitude': None
    }
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–¥—Ä–µ—Å/–ª–æ–∫–∞—Ü–∏—é
    if 'address' in collected_data:
        if isinstance(collected_data['address'], dict):
            complaint_data['latitude'] = collected_data['address'].get('latitude')
            complaint_data['longitude'] = collected_data['address'].get('longitude')
            complaint_data['address'] = collected_data['address'].get('address')
        else:
            complaint_data['address'] = collected_data['address']
    
    if 'location' in collected_data and collected_data['location']:
        if isinstance(collected_data['location'], dict):
            complaint_data['latitude'] = collected_data['location'].get('latitude')
            complaint_data['longitude'] = collected_data['location'].get('longitude')
            if not complaint_data['address']:
                complaint_data['address'] = collected_data['location'].get('address')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try:
        from sqlalchemy.ext.asyncio import AsyncSession
        from backend.db.database import AsyncSessionLocal
        from backend.db import crud
        
        async with AsyncSessionLocal() as db:
            # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await crud.get_user_by_telegram_id(db, complaint_data['telegram_id'])
            if not user:
                user = await crud.create_user(
                    db, 
                    complaint_data['telegram_id'],
                    username=message.from_user.username,
                    first_name=message.from_user.first_name
                )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
            full_description = f"{complaint_data['subcategory']}\n{complaint_data['description']}"
            if complaint_data.get('route_number'):
                full_description = f"–ú–∞—Ä—à—Ä—É—Ç: {complaint_data['route_number']}\n{full_description}"
            if complaint_data.get('vehicle_number'):
                full_description = f"–¢–°: {complaint_data['vehicle_number']}\n{full_description}"
            
            # –°–æ–∑–¥–∞–µ–º –∂–∞–ª–æ–±—É
            complaint = await crud.create_complaint(
                db,
                user_id=user.id,
                category=complaint_data['category'],
                description=full_description,
                address=complaint_data.get('address'),
                latitude=complaint_data.get('latitude'),
                longitude=complaint_data.get('longitude'),
                priority='medium'
            )
            
            complaint_id = complaint.id
    except Exception as e:
        complaint_id = "???"
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∂–∞–ª–æ–±—ã: {e}")
        import traceback
        traceback.print_exc()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∂–∞–ª–æ–±—ã
    text_parts = [f"‚úÖ –û–±—Ä–∞—â–µ–Ω–∏–µ #{complaint_id} –ø—Ä–∏–Ω—è—Ç–æ!\n"]
    text_parts.append(f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {complaint_data['category']}")
    text_parts.append(f"üîñ –¢–∏–ø: {complaint_data['subcategory']}")
    
    if complaint_data.get('route_number'):
        text_parts.append(f"üöå –ú–∞—Ä—à—Ä—É—Ç: {complaint_data['route_number']}")
    if complaint_data.get('vehicle_number'):
        text_parts.append(f"üöó –¢–°: {complaint_data['vehicle_number']}")
    if complaint_data.get('description'):
        text_parts.append(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {complaint_data['description']}")
    if complaint_data.get('address'):
        text_parts.append(f"üìç –ê–¥—Ä–µ—Å: {complaint_data['address']}")
    
    text_parts.append("\n–ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–∞—à—É –∂–∞–ª–æ–±—É –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
    text_parts.append("–û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Å—Ç–∞—Ç—É—Å –≤ —Ä–∞–∑–¥–µ–ª–µ üìã –ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è")
    
    text = "\n".join(text_parts)
    
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìù –ü–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É")],
            [KeyboardButton(
                text="üìã –ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è",
                web_app=WebAppInfo(url="https://sterx.mooo.com:8443/webapp/residents")
            )],
            [KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
        ],
        resize_keyboard=True
    )
    
    await message.answer(text, reply_markup=keyboard)
    await state.clear()

@router.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def help_command(message: types.Message):
    categories = categories_manager.get_categories()
    categories_text = "\n".join([f"‚Ä¢ {cat}" for cat in categories[:5]])
    
    await message.answer(
        f"‚ÑπÔ∏è –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç:\n\n"
        f"üìù –ü–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ\n"
        f"üìã –ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤ Mini App\n"
        f"‚ÑπÔ∏è –ü–æ–º–æ—â—å - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        f"üìÇ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n{categories_text}\n...–∏ –¥—Ä—É–≥–∏–µ\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –±–æ—Ç–∞."
    )
