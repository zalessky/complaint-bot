from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from backend.core.config import settings

router = Router()

@router.message(Command("admin"))
async def cmd_admin(message: types.Message):
    if message.from_user.id not in settings.admin_ids_list and message.from_user.id != settings.SUPER_ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text="üé´ –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–¢–∏–∫–µ—Ç-—Ç—Ä–µ–∫–µ—Ä)",
                web_app=WebAppInfo(url="https://sterx.mooo.com:8443/webapp/services")
            )],
            [InlineKeyboardButton(
                text="üìä API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è",
                url="https://sterx.mooo.com:8443/docs"
            )],
            [InlineKeyboardButton(
                text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                callback_data="admin_stats"
            )]
        ]
    )
    
    await message.answer(
        "üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
        "üé´ –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è - —Ç–∏–∫–µ—Ç-—Ç—Ä–µ–∫–µ—Ä —Å –∫–∞–Ω–±–∞–Ω-–¥–æ—Å–∫–æ–π\n"
        "üìä API - —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è\n"
        "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –æ–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏",
        reply_markup=keyboard
    )

@router.callback_query(F.data == "admin_stats")
async def show_stats(callback: types.CallbackQuery):
    try:
        from sqlalchemy.ext.asyncio import AsyncSession
        from backend.db.database import AsyncSessionLocal
        from backend.db import crud
        from sqlalchemy import select, func
        from backend.db.models import Complaint
        
        async with AsyncSessionLocal() as db:
            # –ü–æ–¥—Å—á–µ—Ç –∂–∞–ª–æ–± –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
            result = await db.execute(
                select(Complaint.status, func.count(Complaint.id))
                .group_by(Complaint.status)
            )
            stats = dict(result.all())
            
            total = await db.execute(select(func.count(Complaint.id)))
            total_count = total.scalar()
            
            text = (
                "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏–π:\n\n"
                f"üìä –í—Å–µ–≥–æ: {total_count}\n"
                f"üÜï –ù–æ–≤—ã—Ö: {stats.get('new', 0)}\n"
                f"‚öôÔ∏è –í —Ä–∞–±–æ—Ç–µ: {stats.get('in_progress', 0)}\n"
                f"‚úÖ –†–µ—à–µ–Ω–æ: {stats.get('resolved', 0)}\n"
            )
            
            await callback.message.answer(text)
    except Exception as e:
        await callback.message.answer(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    await callback.answer()
