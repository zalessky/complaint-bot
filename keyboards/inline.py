from aiogram.filters.callback_data import CallbackData
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from utils.constants import CATEGORIES, ComplaintStatus, STATUS_LABEL_RU

class AdminPanelCallback(CallbackData, prefix='admin_panel'):
    action: str

class ComplaintActionCallback(CallbackData, prefix='complaint_action'):
    action: str
    complaint_id: int

class ComplaintStatusCallback(CallbackData, prefix='complaint_status'):
    action: str = 'set_status'
    status: str
    complaint_id: int

def get_categories_keyboard() -> InlineKeyboardMarkup:
    rows = [[InlineKeyboardButton(text=d['name'], callback_data=f'category_{k}')]
            for k, d in CATEGORIES.items()]
    return InlineKeyboardMarkup(inline_keyboard=rows)

def get_subcategories_keyboard(cat_key: str) -> InlineKeyboardMarkup:
    buttons = [[InlineKeyboardButton(text=sd['name'], callback_data=f'subcategory_{sid}')]
               for sid, sd in CATEGORIES[cat_key]['subcategories'].items()]
    buttons.append([InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º', callback_data='back_to_categories')])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_location_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é', callback_data='send_geolocation')],
        [InlineKeyboardButton(text='‚å®Ô∏è –í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é', callback_data='enter_address_manually')],
        [InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º', callback_data='back_to_subcategories')],
    ])

def confirm_complaint_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å', callback_data='submit_complaint')],
        [InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='cancel_complaint')],
    ])

def get_datetime_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='‚úÖ –°–µ–π—á–∞—Å', callback_data='datetime_now')],
        [InlineKeyboardButton(text='‚å®Ô∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é', callback_data='datetime_manual')],
    ])

def get_admin_panel_keyboard(stats: dict) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=f'üì¨ –ù–æ–≤—ã–µ ({stats.get("new", 0)})',
                callback_data=AdminPanelCallback(action='show_new').pack(),
            ),
            InlineKeyboardButton(
                text=f'‚è≥ –í —Ä–∞–±–æ—Ç–µ ({stats.get("in_work", 0)})',
                callback_data=AdminPanelCallback(action='show_in_work').pack(),
            ),
        ],
        [
            InlineKeyboardButton(
                text='üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
                callback_data=AdminPanelCallback(action='show_stats').pack(),
            ),
            InlineKeyboardButton(
                text='üîé –≠–∫—Å–ø–æ—Ä—Ç',
                callback_data=AdminPanelCallback(action='export').pack(),
            ),
        ],
    ])

def get_complaint_actions_keyboard(cid: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text='‚úÖ –ü—Ä–∏–Ω—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É',
                callback_data=ComplaintActionCallback(action='accept', complaint_id=cid).pack(),
            ),
            InlineKeyboardButton(
                text='‚úçÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å / –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å',
                callback_data=ComplaintActionCallback(action='manage', complaint_id=cid).pack(),
            ),
        ],
        [InlineKeyboardButton(text='üìú –ò—Å—Ç–æ—Ä–∏—è', callback_data=ComplaintActionCallback(action='history', complaint_id=cid).pack())],
    ])

def get_status_selection_keyboard(cid: int) -> InlineKeyboardMarkup:
    statuses = [s for s in ComplaintStatus if s != ComplaintStatus.NEW]
    buttons = [[InlineKeyboardButton(
        text=f"–°—Ç–∞—Ç—É—Å: {STATUS_LABEL_RU[s.value]}",
        callback_data=ComplaintStatusCallback(status=s.value, complaint_id=cid).pack(),
    )] for s in statuses]
    buttons.append([InlineKeyboardButton(
        text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
        callback_data=ComplaintActionCallback(action='back_to_actions', complaint_id=cid).pack(),
    )])
    return InlineKeyboardMarkup(inline_keyboard=buttons)
